{
  "collection": {
    "_": {
      "postman_id": "57313776-86d3-4ed8-be62-c4894159e6db"
    },
    "item": [
      {
        "id": "7a84f658-fc86-4a92-aec3-4011fb94d09c",
        "name": "Module 3B",
        "item": [
          {
            "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
            "name": "Task 2",
            "item": [
              {
                "id": "8c37816a-136d-432f-98ae-721889a64206",
                "name": "Create user",
                "request": {
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                      }
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": "",
                    "cookie": [],
                    "responseTime": null
                  }
                ],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.expect(pm.response.code).to.equal(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the code field in the response\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response time is within acceptable range\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "93e402f7-597d-4106-a940-07d2148a8429",
                "name": "Delete user",
                "request": {
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                        "description": {
                          "content": "(Required) The name that needs to be deleted",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "sint commodo",
                        "key": "username"
                      }
                    ]
                  },
                  "method": "DELETE"
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "type": "any",
                            "key": "username"
                          }
                        ]
                      },
                      "method": "DELETE"
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": "",
                    "cookie": [],
                    "responseTime": null
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "type": "any",
                            "key": "username"
                          }
                        ]
                      },
                      "method": "DELETE"
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": "",
                    "cookie": [],
                    "responseTime": null
                  }
                ],
                "event": [],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
                "name": "Get user by user name",
                "request": {
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                        "description": {
                          "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "sint commodo",
                        "key": "username"
                      }
                    ]
                  },
                  "method": "GET"
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "0048323f-afcc-4070-b39f-df68b9003710",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "type": "any",
                            "key": "username"
                          }
                        ]
                      },
                      "method": "GET"
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                    "cookie": [],
                    "responseTime": null
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "type": "any",
                            "key": "username"
                          }
                        ]
                      },
                      "method": "GET"
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": "",
                    "cookie": [],
                    "responseTime": null
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "type": "any",
                            "key": "username"
                          }
                        ]
                      },
                      "method": "GET"
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "text/plain"
                      }
                    ],
                    "body": "",
                    "cookie": [],
                    "responseTime": null
                  }
                ],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
            "name": "Task 3",
            "item": [
              {
                "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
                "name": "get books",
                "request": {
                  "url": {
                    "path": [
                      "books"
                    ],
                    "host": [
                      "{{url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                      "type": "text/javascript",
                      "exec": [
                        "\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the response body is an array\", function () {\r",
                        "    pm.expect(pm.response.json()).to.be.an('array');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('array');\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('array');\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
                "name": "verify Id",
                "request": {
                  "url": {
                    "path": [
                      "books",
                      ":bookid"
                    ],
                    "host": [
                      "{{url}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "type": "any",
                        "value": "5",
                        "key": "bookid"
                      }
                    ]
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                        "    var jsonData = pm.response.json();\r",
                        "    console.log(jsonData.name)\r",
                        "    pm.expect(jsonData.id).to.eql(5);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.expect(pm.response.code).to.equal(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the id field\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the name field\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                        "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the author field\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Validate the type field\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "24cc1211-7305-44db-b7f3-747ec563a055",
            "name": "Task 4",
            "item": [
              {
                "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
                "name": "Order_Book Copy",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "post"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{accessToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.expect(pm.response.code).to.equal(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response has required fields\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData).to.have.property('data');\r",
                        "    pm.expect(responseData.data).to.be.an('object');\r",
                        "    pm.expect(responseData.data).to.have.property('bookId');\r",
                        "    pm.expect(responseData.data).to.have.property('customerName');\r",
                        "    pm.expect(responseData.data).to.have.property('bookName');\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"bookId is a non-negative integer\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                        "        return value >= 0;\r",
                        "    }, \"Value should be a non-negative integer\");\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Customer name is a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"bookName should be a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
                "name": "Order_Book_Random_Name Copy",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "post"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{accessToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                      "type": "text/javascript",
                      "exec": [
                        "var jsonData = pm.response.json();\r",
                        "console.log(jsonData.data)\r",
                        "\r",
                        "pm.test(\"status code is 200\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "pm.test(\"The book name is The Russian\", function () {\r",
                        "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.expect(pm.response.code).to.equal(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"The 'data' object is present in the response\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('object');\r",
                        "    pm.expect(responseData.data).to.exist;\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"The data object contains the required fields\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                        "\r",
                        "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                        "\r",
                        "    requiredFields.forEach(function (field) {\r",
                        "        pm.expect(responseData.data[field]).to.exist;\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Headers object is present in the response\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData.headers).to.exist;\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Headers object contains the required fields\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                        "\r",
                        "    pm.expect(responseData.headers).to.be.an('object');\r",
                        "\r",
                        "    requiredFields.forEach(function (field) {\r",
                        "        pm.expect(responseData.headers[field]).to.exist;\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
                "name": "Get_Books Copy",
                "request": {
                  "url": {
                    "path": [
                      "books"
                    ],
                    "host": [
                      "{{url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", () => {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "\r",
                        "\r",
                        "pm.test(\"Id is a non-negative integer\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('array');\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Name is a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('array');\r",
                        "\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"Type is a non-empty string\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    pm.expect(responseData).to.be.an('array');\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        "\r",
                        "pm.test(\"available is a boolean value\", function () {\r",
                        "    const responseData = pm.response.json();\r",
                        "\r",
                        "    responseData.forEach(function (book) {\r",
                        "        pm.expect(book.available).to.be.a('boolean');\r",
                        "    });\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "57313776-86d3-4ed8-be62-c4894159e6db",
      "name": "Test Automation School",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "f938fab1-5501-4682-a888-b750c513af99",
    "values": []
  },
  "globals": {
    "id": "951e593a-4d9e-44ed-b2e1-9cb22b89ba58",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 36,
        "pending": 0,
        "failed": 23
      },
      "testScripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 270.2857142857143,
      "responseMin": 350,
      "responseMax": 1542,
      "responseSd": 533.0348994968647,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691622307961,
      "completed": 1691622310923
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137"
        },
        "item": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "user"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02fc162f-b988-4e66-bf76-9126327d2bb9",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
          }
        },
        "id": "8c37816a-136d-432f-98ae-721889a64206",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response status code is 200",
              "message": "expected undefined to equal 200",
              "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Validate the code field in the response",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Validate the code field in the response",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Validate the 'type' field in the response",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Validate the 'type' field in the response",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Validate the 'message' field in the response",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Validate the 'message' field in the response",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Response time is within acceptable range",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Response time is within acceptable range",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:6:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "143a4925-fe94-4510-9809-333eadc7ff06",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ff3b69d-248a-43c2-b44d-55c80c07cc6b"
        },
        "item": {
          "id": "93e402f7-597d-4106-a940-07d2148a8429",
          "name": "Delete user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                  "description": {
                    "content": "(Required) The name that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "sint commodo",
                  "key": "username"
                }
              ]
            },
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "user",
              "sint%20commodo"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9fdb34a1-da47-46b4-9bc9-6df6fc90e643",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "93e402f7-597d-4106-a940-07d2148a8429",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        }
      },
      {
        "cursor": {
          "ref": "0c2afc1a-2868-4080-9852-33dfb2c43d10",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "165bdeed-1995-4959-82cd-9d04d92c32b0"
        },
        "item": {
          "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
          "name": "Get user by user name",
          "request": {
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                  "description": {
                    "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "sint commodo",
                  "key": "username"
                }
              ]
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0048323f-afcc-4070-b39f-df68b9003710",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "user",
              "sint%20commodo"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2339530a-d2bc-46ae-b45a-5850436a1bed",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        }
      },
      {
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe"
        },
        "item": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b67130e9-413f-4d47-a955-5ef7db85e767",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Validate the response body is an array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Validate the response body is an array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Validate the 'id' field is a non-negative integer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Validate the 'id' field is a non-negative integer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)"
            }
          },
          {
            "assertion": "Validate the 'name' field is a non-empty string",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Validate the 'name' field is a non-empty string",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:4)"
            }
          },
          {
            "assertion": "Validate the 'type' field is a non-empty string",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "Validate the 'type' field is a non-empty string",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd"
        },
        "item": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books",
              "5"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c632bcc4-a8d1-42d7-8ad1-72ab8bff6d27",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}"
        },
        "assertions": [
          {
            "assertion": "check if the id number of untamed is 5",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "check if the id number of untamed is 5",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response status code is 200",
              "message": "expected undefined to equal 200",
              "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Validate the id field",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Validate the id field",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:5)"
            }
          },
          {
            "assertion": "Validate the name field",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Validate the name field",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:5)"
            }
          },
          {
            "assertion": "Validate the author field",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Validate the author field",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:5)"
            }
          },
          {
            "assertion": "Validate the type field",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "Validate the type field",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "91c6ac1b-32a6-46b2-a0f2-e5f62b0adca9",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "71568f86-c715-429a-b885-53482c65a107"
        },
        "item": {
          "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
          "name": "Order_Book Copy",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{accessToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('data');\r",
                  "    pm.expect(responseData.data).to.be.an('object');\r",
                  "    pm.expect(responseData.data).to.have.property('bookId');\r",
                  "    pm.expect(responseData.data).to.have.property('customerName');\r",
                  "    pm.expect(responseData.data).to.have.property('bookName');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"bookId is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                  "        return value >= 0;\r",
                  "    }, \"Value should be a non-negative integer\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Customer name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"bookName should be a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{accessToken}}",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8dcd91b8-222e-4811-937d-ceaf0ff74ddd",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "74",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{accessToken}}",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1a041a90-e3c2-4446-b5b0-1a5651c2690e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 09 Aug 2023 23:05:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "769"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"301-kMXPLjLlykc678TWHTeeUMk7MR8\""
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ARaG0C5MdkM3TsEIRWQc00vsaDExv8l-G.oHnKBE3ucs57RfuXJC6S1yjYN%2FkbmLOa4gtsJQtYYAo; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              73,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              97,
              100,
              101,
              107,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              123,
              123,
              110,
              97,
              109,
              101,
              125,
              125,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              54,
              52,
              100,
              52,
              49,
              98,
              97,
              54,
              45,
              52,
              99,
              98,
              102,
              51,
              54,
              100,
              98,
              55,
              53,
              52,
              102,
              99,
              48,
              51,
              56,
              54,
              52,
              50,
              98,
              99,
              54,
              56,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              32,
              34,
              55,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              66,
              101,
              97,
              114,
              101,
              114,
              32,
              123,
              123,
              97,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              57,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              56,
              100,
              99,
              100,
              57,
              49,
              98,
              56,
              45,
              50,
              50,
              50,
              101,
              45,
              52,
              56,
              49,
              49,
              45,
              57,
              51,
              55,
              100,
              45,
              99,
              101,
              97,
              102,
              48,
              102,
              102,
              55,
              52,
              100,
              100,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              73,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              97,
              100,
              101,
              107,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              123,
              123,
              110,
              97,
              109,
              101,
              125,
              125,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1542,
          "responseSize": 769
        },
        "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has required fields",
            "skipped": false
          },
          {
            "assertion": "bookId is a non-negative integer",
            "skipped": false
          },
          {
            "assertion": "Customer name is a non-empty string",
            "skipped": false
          },
          {
            "assertion": "bookName should be a non-empty string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c91c0313-d958-4649-8607-09c04050a67b",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "12cb16bc-9961-40fd-9f52-d32006f606f9"
        },
        "item": {
          "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
          "name": "Order_Book_Random_Name Copy",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{accessToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "console.log(jsonData.data)\r",
                  "\r",
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The book name is The Russian\", function () {\r",
                  "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"The 'data' object is present in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.data).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"The data object contains the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                  "\r",
                  "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                  "\r",
                  "    requiredFields.forEach(function (field) {\r",
                  "        pm.expect(responseData.data[field]).to.exist;\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Headers object is present in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.headers).to.exist;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Headers object contains the required fields\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                  "\r",
                  "    pm.expect(responseData.headers).to.be.an('object');\r",
                  "\r",
                  "    requiredFields.forEach(function (field) {\r",
                  "        pm.expect(responseData.headers[field]).to.exist;\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{accessToken}}",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b916ee65-a01c-422e-91f8-396b526c7d95",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "246",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3ARaG0C5MdkM3TsEIRWQc00vsaDExv8l-G.oHnKBE3ucs57RfuXJC6S1yjYN%2FkbmLOa4gtsJQtYYAo",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{accessToken}}",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "742c357f-5937-49c4-b922-de887549097f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 09 Aug 2023 23:05:11 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1208"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"4b8-5oVjPtnujSbh9r14GxIvxukgLbM\""
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AeohezoQvdiTUyctK0cVMqioI-nX3B6Wd.OrU0P1DnZZnd4VX7nN4iTsZ5AEDsuK91uaVgZ6OETkI; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              73,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              97,
              100,
              101,
              107,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              123,
              123,
              110,
              97,
              109,
              101,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              32,
              34,
              74,
              97,
              109,
              101,
              115,
              32,
              80,
              97,
              116,
              116,
              101,
              114,
              115,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              74,
              97,
              109,
              101,
              115,
              32,
              79,
              46,
              32,
              66,
              111,
              114,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              115,
              98,
              110,
              34,
              58,
              32,
              34,
              49,
              55,
              56,
              48,
              56,
              57,
              57,
              52,
              55,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              102,
              105,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              32,
              49,
              50,
              46,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              45,
              115,
              116,
              111,
              99,
              107,
              34,
              58,
              32,
              49,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              32,
              123,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              54,
              52,
              100,
              52,
              49,
              98,
              97,
              55,
              45,
              54,
              97,
              54,
              53,
              48,
              53,
              55,
              50,
              49,
              50,
              55,
              56,
              55,
              51,
              101,
              56,
              50,
              56,
              51,
              51,
              55,
              55,
              50,
              102,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              32,
              34,
              50,
              52,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              66,
              101,
              97,
              114,
              101,
              114,
              32,
              123,
              123,
              97,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              57,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              98,
              57,
              49,
              54,
              101,
              101,
              54,
              53,
              45,
              97,
              48,
              49,
              99,
              45,
              52,
              50,
              50,
              101,
              45,
              57,
              49,
              102,
              56,
              45,
              51,
              57,
              54,
              98,
              53,
              50,
              54,
              99,
              55,
              100,
              57,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              82,
              97,
              71,
              48,
              67,
              53,
              77,
              100,
              107,
              77,
              51,
              84,
              115,
              69,
              73,
              82,
              87,
              81,
              99,
              48,
              48,
              118,
              115,
              97,
              68,
              69,
              120,
              118,
              56,
              108,
              45,
              71,
              46,
              111,
              72,
              110,
              75,
              66,
              69,
              51,
              117,
              99,
              115,
              53,
              55,
              82,
              102,
              117,
              88,
              74,
              67,
              54,
              83,
              49,
              121,
              106,
              89,
              78,
              37,
              50,
              70,
              107,
              98,
              109,
              76,
              79,
              97,
              52,
              103,
              116,
              115,
              74,
              81,
              116,
              89,
              89,
              65,
              111,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              111,
              111,
              107,
              73,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              115,
              116,
              111,
              109,
              101,
              114,
              78,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              70,
              97,
              100,
              101,
              107,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              123,
              123,
              110,
              97,
              109,
              101,
              125,
              125,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              34,
              58,
              32,
              34,
              74,
              97,
              109,
              101,
              115,
              32,
              80,
              97,
              116,
              116,
              101,
              114,
              115,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              74,
              97,
              109,
              101,
              115,
              32,
              79,
              46,
              32,
              66,
              111,
              114,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              115,
              98,
              110,
              34,
              58,
              32,
              34,
              49,
              55,
              56,
              48,
              56,
              57,
              57,
              52,
              55,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              102,
              105,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              32,
              49,
              50,
              46,
              57,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              45,
              115,
              116,
              111,
              99,
              107,
              34,
              58,
              32,
              49,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 350,
          "responseSize": 1208
        },
        "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "The book name is The Russian",
            "skipped": false
          },
          {
            "assertion": "Response status code is 200",
            "skipped": false
          },
          {
            "assertion": "The 'data' object is present in the response",
            "skipped": false
          },
          {
            "assertion": "The data object contains the required fields",
            "skipped": false
          },
          {
            "assertion": "Headers object is present in the response",
            "skipped": false
          },
          {
            "assertion": "Headers object contains the required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521"
        },
        "item": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "books"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5196b933-1255-4367-ae47-9825b91751b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{url}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}"
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Id is a non-negative integer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Id is a non-negative integer",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Name is a non-empty string",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Name is a non-empty string",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:8)"
            }
          },
          {
            "assertion": "Type is a non-empty string",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Type is a non-empty string",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:8)"
            }
          },
          {
            "assertion": "available is a boolean value",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "available is a boolean value",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:8)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1977
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "f22b3d2940505eb8e793bee2524cc02b",
          "id": "037abde7-20ed-454b-a74a-7a4c6e0dbfed",
          "timestamp": 1691622308058,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "b149b18033a9c325e37d8773a6bd75c3",
          "id": "319f12e8-f63b-4c04-9356-1214d44219e3",
          "timestamp": 1691622308171,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response status code is 200",
          "message": "expected undefined to equal 200",
          "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "7815cef041067c3051555eda76c62ad2",
          "id": "19de5b6e-16e2-4be1-9ee9-909b728c0a5e",
          "timestamp": 1691622308180,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Validate the code field in the response",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "14840dc76d7467dba1b94b8bf0c7c6ea",
          "id": "bddd3d5b-2f77-443e-8cb9-be0ab50591e0",
          "timestamp": 1691622308184,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Validate the 'type' field in the response",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "6dc7e56ea9e7bf157526ac61efd56673",
          "id": "930bcbb9-25f8-4d68-977e-ba5fc30aadc7",
          "timestamp": 1691622308187,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Validate the 'message' field in the response",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "23981a152c6164d6478fc99857fe5bbc",
          "id": "dae12423-222d-4035-affc-9ad5f247f757",
          "timestamp": 1691622308191,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Response time is within acceptable range",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "1c253b4508dc97b4172ab00f72008b88",
          "id": "ebcbfb2a-22bb-4c23-b137-30d4365042ae",
          "timestamp": 1691622308195,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "8c37816a-136d-432f-98ae-721889a64206",
          "name": "Create user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the code field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response time is within acceptable range\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e95ce46-1bd4-4c10-aaed-0e2c0c9b1045",
          "httpRequestId": "34f0cd2e-3a69-4a06-b65a-138c1e84f137",
          "scriptId": "09365077-097f-4423-9f2d-7201fa9e9f33",
          "execution": "954dac19-88a7-4126-b419-b9aec249348d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "f22b3d2940505eb8e793bee2524cc02b",
          "id": "04afe4e8-88c2-4156-992c-143d26dd0181",
          "timestamp": 1691622308293,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "93e402f7-597d-4106-a940-07d2148a8429",
          "name": "Delete user",
          "request": {
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                  "description": {
                    "content": "(Required) The name that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "sint commodo",
                  "key": "username"
                }
              ]
            },
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "143a4925-fe94-4510-9809-333eadc7ff06",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8ff3b69d-248a-43c2-b44d-55c80c07cc6b"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "f22b3d2940505eb8e793bee2524cc02b",
          "id": "081b9a31-f0ca-4304-88c2-5126b4748dd3",
          "timestamp": 1691622308361,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
          "name": "Get user by user name",
          "request": {
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                  "description": {
                    "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "sint commodo",
                  "key": "username"
                }
              ]
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0048323f-afcc-4070-b39f-df68b9003710",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "responseTime": null
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "86ad5839-8e45-4889-884b-9ac1071e92a5",
          "name": "Task 2",
          "item": [
            {
              "id": "8c37816a-136d-432f-98ae-721889a64206",
              "name": "Create user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "fca0877d-4807-4e6d-8023-0d4982f4e1e7",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": -20393415,\n    \"pet\": {\n        \"name\": \"Guru\",\n        \"photoUrls\": [\n            \"reprehenderit quis dolore\",\n            \"eiusmod elit\"\n        ],\n        \"id\": -64669817,\n        \"category\": {\n            \"id\": -35660533,\n            \"name\": \"id consectetur\",\n            \"sub\": {\n                \"prop1\": \"paria\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"id\": 49327673,\n                \"name\": \"aliquip ut\"\n            }\n        ],\n        \"status\": \"pending\",\n        \"petType\": \"Excepteur\"\n    },\n    \"username\": \"John78\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"// // // //\",\n    \"phone\": \"/+5-8498-9-09-80-0-06/\",\n    \"userStatus\": -9981210\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09365077-097f-4423-9f2d-7201fa9e9f33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the code field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.code).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'message' field in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is within acceptable range\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "954dac19-88a7-4126-b419-b9aec249348d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "93e402f7-597d-4106-a940-07d2148a8429",
              "name": "Delete user",
              "request": {
                "description": {
                  "content": "This can only be done by the logged in user.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "53d77c47-98c1-403b-8c4a-b470f5c0f855",
                      "description": {
                        "content": "(Required) The name that needs to be deleted",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "6b7813fd-0c16-497b-8566-a56e62422ef2",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "d429fce8-ef53-46c8-a28e-d2170d201cb0",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "DELETE"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "03e298dc-9af4-417e-bf2f-4070076a42b5",
              "name": "Get user by user name",
              "request": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "id": "2285b4c2-ca46-4b09-be18-a664ed8b9ab2",
                      "description": {
                        "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "sint commodo",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0048323f-afcc-4070-b39f-df68b9003710",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": -20393415,\n \"pet\": {\n  \"name\": \"Guru\",\n  \"photoUrls\": [\n   \"reprehenderit quis dolore\",\n   \"eiusmod elit\"\n  ],\n  \"id\": -64669817,\n  \"category\": {\n   \"id\": -35660533,\n   \"name\": \"id consectetur\",\n   \"sub\": {\n    \"prop1\": \"paria\"\n   }\n  },\n  \"friend\": {\n   \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n  },\n  \"tags\": [\n   {\n    \"id\": 49327673,\n    \"name\": \"aliquip ut\"\n   }\n  ],\n  \"status\": \"pending\",\n  \"petType\": \"Excepteur\"\n },\n \"username\": \"John78\",\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"email\": \"john.smith@example.com\",\n \"password\": \"// // // //\",\n \"phone\": \"/+5-8498-9-09-80-0-06/\",\n \"userStatus\": -9981210\n}",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "a2dfe96e-72d2-401c-83b7-4b6c6d96a650",
                  "name": "Invalid username supplied",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                },
                {
                  "_": {
                    "postman_previewlanguage": "text"
                  },
                  "id": "25be5c37-5fe8-4247-81d6-2a75410d9319",
                  "name": "User not found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "user",
                        ":username"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "type": "any",
                          "key": "username"
                        }
                      ]
                    },
                    "method": "GET"
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "responseTime": null
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f59ac3a-820e-4a7d-aa3c-93b3e91debdf",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "13163d32-2185-4055-aa33-5004dd573532"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0c2afc1a-2868-4080-9852-33dfb2c43d10",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "165bdeed-1995-4959-82cd-9d04d92c32b0"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{url}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "a54b83180857ecd8214cd01502bee580",
          "id": "0f2c03e9-2c50-47f1-a921-7ba645d5c3d1",
          "timestamp": 1691622308455,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "c61b79a143b5f8899a9762ad2c369493",
          "id": "c5e5e94e-c3e0-4ecd-aed3-9f1e980d551f",
          "timestamp": 1691622308486,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "1a2161546ce6f79908baa5b1c1f5efdf",
          "id": "b22aa1fa-eb84-42b4-808c-8b42efd299d0",
          "timestamp": 1691622308496,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Validate the response body is an array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "dff1aac552d239555ae2c3fd771b87c1",
          "id": "aaab2fe0-9dbe-4dcc-bcca-a89dff831942",
          "timestamp": 1691622308498,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Validate the 'id' field is a non-negative integer",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)",
          "checksum": "888eda234d5bb3190a997aa8d2a5673c",
          "id": "75fb608d-decd-4cee-9ef7-9a340f6d3717",
          "timestamp": 1691622308502,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Validate the 'name' field is a non-empty string",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:4)",
          "checksum": "88f8304f3d66b8200a8e85aff064a091",
          "id": "d288e8fa-aa7b-41a4-9da7-a1ff1781b4e0",
          "timestamp": 1691622308505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 5,
          "test": "Validate the 'type' field is a non-empty string",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:4)",
          "checksum": "5d67bf9163bab0571e17485008c754bd",
          "id": "ac63df30-f26a-4bcd-87b3-9d92344c85d3",
          "timestamp": 1691622308508,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
          "name": "get books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the response body is an array\", function () {\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22e0277a-460d-4691-8b06-ec9e0c6829cc",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89c64739-e63f-4c9a-aead-2b23398743fe",
          "scriptId": "65f938a2-25fb-4551-8dc2-88028243c85a",
          "execution": "818d8ec8-98b9-494d-8212-6c558ab3373e"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{url}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "a54b83180857ecd8214cd01502bee580",
          "id": "391d68bf-1399-4e9f-ac0d-9faad844948f",
          "timestamp": 1691622308575,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "check if the id number of untamed is 5",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "ecfca59610e47c03ad9714a3e36270ad",
          "id": "2588b0fe-253f-4004-868f-838932a6f3bb",
          "timestamp": 1691622308592,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response status code is 200",
          "message": "expected undefined to equal 200",
          "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "74817a94dfb824ffb4b0b618858994df",
          "id": "38b0e9af-78ee-4ac7-8e2e-faf8adb30a3b",
          "timestamp": 1691622308596,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Validate the id field",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "e48b1431d9253e44d4792b142a0bdc0a",
          "id": "7515eb5e-9344-43d5-b9bd-9bb15b3e8ce5",
          "timestamp": 1691622308599,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Validate the name field",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:5)",
          "checksum": "0c798975abbac5c4a6e7b953687e60ed",
          "id": "161303a7-f2d5-40c8-a171-59976f92e9b8",
          "timestamp": 1691622308602,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Validate the author field",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:5)",
          "checksum": "50bc083518c5340ed085c0dc074c550c",
          "id": "5d564b35-95a9-481c-800a-2b0323bca501",
          "timestamp": 1691622308605,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 5,
          "test": "Validate the type field",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:5)",
          "checksum": "0f1b76f94182f0b9255e59bbb20a9832",
          "id": "392a4625-d8d5-460e-b3d6-cf47f84c5ebb",
          "timestamp": 1691622308607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
          "name": "verify Id",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookid"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "5",
                  "key": "bookid"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    console.log(jsonData.name)\r",
                  "    pm.expect(jsonData.id).to.eql(5);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the id field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the name field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                  "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the author field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validate the type field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "e98e709d-a272-4187-93f5-3cebf51928b9",
          "name": "Task 3",
          "item": [
            {
              "id": "4b8bb1c2-798b-423b-8224-9f78eff03de0",
              "name": "get books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65f938a2-25fb-4551-8dc2-88028243c85a",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'id' field is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'name' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the 'type' field is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "818d8ec8-98b9-494d-8212-6c558ab3373e"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "42efd2fa-a461-48bc-987e-8cb1fe223f64",
              "name": "verify Id",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookid"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "5",
                      "key": "bookid"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"check if the id number of untamed is 5\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    console.log(jsonData.name)\r",
                      "    pm.expect(jsonData.id).to.eql(5);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the id field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the name field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.name).to.exist.and.to.be.a('string', \"Name should be a string\");\r",
                      "    pm.expect(responseData.name).to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the author field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.author).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Validate the type field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.type).to.exist.and.to.be.a('string');\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a8f86f7-1085-46c2-a2cd-56fa1f8a788a",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9efe0331-7fb3-4fd6-88db-906cc43682bd",
          "scriptId": "b055b81a-3f7f-4c5e-9a4b-3b3304b1667d",
          "execution": "d9dcc93a-4ea2-48ff-b77f-051c575405fc"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{url}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{url}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{url}}\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)",
          "checksum": "a54b83180857ecd8214cd01502bee580",
          "id": "f1c9e589-afbb-4333-95a3-c2d5cac792ac",
          "timestamp": 1691622310841,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 108,
              "functionName": "GetAddrInfoReqWrap.onlookup [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookup [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "da965f6de5cd5163a70d457d671e094a",
          "id": "c316c162-a048-4b79-b9b8-3665ce907f60",
          "timestamp": 1691622310872,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521",
          "scriptId": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
          "execution": "33e2645e-c108-49d9-b25e-420bf498c8ff"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Id is a non-negative integer",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "6963f547efab323995c88f09218aab1f",
          "id": "c86bbb79-5f28-4fe4-b83f-e33296cfa87a",
          "timestamp": 1691622310875,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521",
          "scriptId": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
          "execution": "33e2645e-c108-49d9-b25e-420bf498c8ff"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Name is a non-empty string",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "5c647115e353962f4e0db58a12a890b6",
          "id": "b496d28d-5869-4555-a687-93a40809aad7",
          "timestamp": 1691622310878,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521",
          "scriptId": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
          "execution": "33e2645e-c108-49d9-b25e-420bf498c8ff"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Type is a non-empty string",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:8)",
          "checksum": "64155d67155bc940027e019ec6efa976",
          "id": "7c3e1d49-10d6-48fb-b972-d5bbf66571aa",
          "timestamp": 1691622310881,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521",
          "scriptId": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
          "execution": "33e2645e-c108-49d9-b25e-420bf498c8ff"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "available is a boolean value",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:8)",
          "checksum": "0e0692baf8c1e35842545c375ab9104b",
          "id": "b658010d-d006-4a49-867f-6db2316fd6c2",
          "timestamp": 1691622310885,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
          "name": "Get_Books Copy",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Id is a non-negative integer\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Name is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Type is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseData).to.be.an('array');\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"available is a boolean value\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "\r",
                  "    responseData.forEach(function (book) {\r",
                  "        pm.expect(book.available).to.be.a('boolean');\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24cc1211-7305-44db-b7f3-747ec563a055",
          "name": "Task 4",
          "item": [
            {
              "id": "f82fc031-3adf-45be-a71c-ac3a1220a328",
              "name": "Order_Book Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n  \"bookName\": \"{{name}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ac3da5c-e076-4e13-aaca-0347441cfecb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('data');\r",
                      "    pm.expect(responseData.data).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.have.property('bookId');\r",
                      "    pm.expect(responseData.data).to.have.property('customerName');\r",
                      "    pm.expect(responseData.data).to.have.property('bookName');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookId is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookId).to.exist.and.to.be.a('number').and.to.satisfy(function (value) {\r",
                      "        return value >= 0;\r",
                      "    }, \"Value should be a non-negative integer\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Customer name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data.customerName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"bookName should be a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.json.bookName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "24c2498f-d326-4918-91a2-a4c3c5435543"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "429ad687-1764-4354-bf7b-de6ffb181d86",
              "name": "Order_Book_Random_Name Copy",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "post"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookId\":1,\r\n  \"customerName\": \"Fadeke\",\r\n    \"name\": \"{{name}}\",\r\n    \"author\": \"James Patterson and James O. Born\",\r\n    \"isbn\": \"1780899475\",\r\n    \"type\": \"fiction\",\r\n    \"price\": 12.98,\r\n    \"current-stock\": 12,\r\n    \"available\": true\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{accessToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b08076b-8f70-4964-ba60-84f90c719555",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "console.log(jsonData.data)\r",
                      "\r",
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The book name is The Russian\", function () {\r",
                      "    pm.expect(jsonData.data.name).to.eql(\"{{name}}\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The 'data' object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.data).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The data object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"bookId\", \"customerName\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"];\r",
                      "\r",
                      "    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.data[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object is present in the response\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.exist;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Headers object contains the required fields\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    const requiredFields = [\"x-forwarded-proto\", \"x-forwarded-port\", \"host\", \"x-amzn-trace-id\", \"content-length\", \"content-type\", \"authorization\", \"user-agent\"];\r",
                      "\r",
                      "    pm.expect(responseData.headers).to.be.an('object');\r",
                      "\r",
                      "    requiredFields.forEach(function (field) {\r",
                      "        pm.expect(responseData.headers[field]).to.exist;\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "6ac33cfe-5069-4805-ad32-554ee7e4762f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "58167508-75a0-44d9-a3e6-c6cf5de839f1",
              "name": "Get_Books Copy",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Id is a non-negative integer\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.id).to.be.a('number').and.to.be.at.least(0);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Name is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Type is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    pm.expect(responseData).to.be.an('array');\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"available is a boolean value\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "\r",
                      "    responseData.forEach(function (book) {\r",
                      "        pm.expect(book.available).to.be.a('boolean');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "33e2645e-c108-49d9-b25e-420bf498c8ff"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13f2c65d-ca99-43a6-8b3f-895150b2c2fa",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "935319f7-04c0-4db3-adcc-c39e4600e521",
          "scriptId": "4732bcb9-ea69-48ae-998c-0bfea07a40e9",
          "execution": "33e2645e-c108-49d9-b25e-420bf498c8ff"
        }
      }
    ],
    "error": null
  }
}